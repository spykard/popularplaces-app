##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

upstream popularplaces {
	server 127.0.0.1:8001;
}

# Default server configuration
#
server {
        if ($host ~ ^www\.(?<domain>.+)$) {
                return 301 $scheme://$domain$request_uri;
	}

        if ($host = 3.120.127.228) {
                return 301 https://popularplaces.app$request_uri;
        }

	if ($host = ec2-3-120-127-228.eu-central-1.compute.amazonaws.com) {
		return 301 https://popularplaces.app$request_uri;
	}

	# SSL configuration
	#
	#listen 443 ssl default_server;
	#listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	#root /home/ubuntu/popularplaces-app;

	# Add index.php to the list if you are using PHP
	#index index.html index.htm index.nginx-debian.html;

    	listen [::]:443 ssl ipv6only=on; # managed by Certbot
    	listen 443 ssl; # managed by Certbot
        server_name 3.120.127.228 popularplaces.app www.popularplaces.app ec2-3-120-127-228.eu-central-1.compute.amazonaws.com;	
	ssl_certificate /etc/letsencrypt/live/popularplaces.app/fullchain.pem; # managed by Certbot
	ssl_certificate_key /etc/letsencrypt/live/popularplaces.app/privkey.pem; # managed by Certbot
	include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		#proxy_ssl_server_name on;
		proxy_pass http://popularplaces;
        	proxy_set_header Host $host;
	        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	}

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}


}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}

server {
        if ($host ~ ^www\.(?<domain>.+)$) {
                return 301 https://$domain$request_uri;
        }

        if ($host = 3.120.127.228) {
                return 301 https://popularplaces.app$request_uri;
        }

        if ($host = ec2-3-120-127-228.eu-central-1.compute.amazonaws.com) {
                return 301 https://popularplaces.app$request_uri;
        }

	listen 80 default_server;
	listen [::]:80 default_server;

        server_name 3.120.127.228 popularplaces.app www.popularplaces.app ec2-3-120-127-228.eu-central-1.compute.amazonaws.com;
    	return 404; # managed by Certbot
}
